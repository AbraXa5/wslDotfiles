#ls
#alias ls='ls --color=auto'
if [ -x "$(command -v exa)" ]; then
    alias ls="exa"
    alias la="exa --long --all --group"
fi


alias sl="ls"

if [ -x "$(command -v lsd)" ]; then
    alias lls="lsd"
    alias lla="lsd --long -A --group-directories-first --human-readable"
fi


#-----------

#misc
alias hg='history|grep'
alias l.='ls -t -1'
alias count='find . -type f | wc -l'
alias gc='git clone'
alias untar='tar -zxvf '
function grep_history_commands(){
    history | grep "$1" | tr -s ' ' | cut -d' ' -f5-
}
alias grephistory='grep_history_commands'
#alias myalias='nano  ~/.oh-my-bash/custom/aliases/example.aliases.sh'
#alias sublmyalias='subl  ~/.oh-my-bash/custom/aliases/example.aliases.sh'
alias myalias='nano ~/.bash_aliases'
alias sublmyalias='subl ~/.bash_aliases'
alias cheat="curl cheat.sh/$1"
alias semgrepcheck="semgrep --config=p/ci --verbose $1 $2"
alias c='clear'
#change directory and list content
function cl() {
    DIR="$*";
    # if no DIR given, go home
    if [ $# -lt 1 ]; then
        DIR=$HOME;
    fi;
    builtin cd "${DIR}" && \
    # use your preferred ls command
    ls -F --color=auto
}

# mkdir && cd
mkcd ()
{
    mkdir -p -- "$1" &&
    cd -- "$1"
}
alias mcd="mckd"
#setworking directory
function set_workingDirectory() {
    export working_dir="$PWD"
}
alias setwd="set_workingDirectory"
alias gotowd="cd \$working_dir"

#ps greappable
alias psg="ps aux | grep -v grep | grep -i"

alias src='source ~/.zshrc'


#-----------



#python

#virtual env
alias ve='python3 -m venv ./venv'
alias va='source ./venv/bin/activate'
#other


#-----------

# git related

alias gs='git status'
alias gsp='git status --porcelain'

alias gaa='git add -A'
alias gac='git add .'

alias gcm="git commit -am $1"

alias gp='git push'

alias gl='git log'
alias glp='git log --pretty=oneline'

#-----------

#Infosec realted

list_ips() {
    ip a show scope global | awk '/^[0-9]+:/ { sub(/:/,"",$2); iface=$2 } /^[[:space:]]*inet / { split($2, a, "/"); print "[\033[96m" iface"\033[0m] "a[1] }'
}

alias tun0="ifconfig tun0 | grep 'inet ' | cut -d' ' -f10 | tr -d '\n' | xclip -sel clip"
#Serve http server
function python_server() {
    list_ips
    echo "http://"$(ip -br a | grep tun0 | tr -s " " | cut -d" " -f3 | cut -d'/' -f1)"/" | xclip -sel clip
    echo -e "[\e[96m`pwd`\e[0m]\e[34m" && echo -en "\e[0m"
    echo "Files" && ls
    python3 -m http.server 80
}

alias serverup="python_server"
alias www="python_server"

#alias serverup="ip -f inet addr show tun0 | echo \"http://\`grep -Po 'inet \K[\d.]+'\`/\"; pwd; python3 -m http.server 80"

#show all open ports
alias openports='netstat -tulanp'

setip() {
    export IP="$1"
}

# Templates

# create a new note from template
alias newnote='cp ~/.templates/notes_template.md ./notes.md && subl notes.md'

# create python requests boilerplate code
alias python_request='cp ~/.templates/pythonRequests_template.py ./request.py && subl request.py'

# create bash boilerplate code
newBash() {
    cp ~/.templates/bash_template.sh "./${1}" && subl "${1}"
}


#-----------

#THM vpn access
alias start-thm='sudo openvpn ~/vpn_configs/thm_Abr4Xa5.ovpn'

#HTB vpn access
alias start-htb='sudo openvpn ~/vpn_configs/lab_Abr4Xa5.ovpn'
alias start-htb_endgame='sudo openvpn ~/vpn_configs/endgames_Abr4Xa5.ovpn'
alias start-htb_fortress='sudo openvpn ~/vpn_configs/fortresses_Abr4Xa5.ovpn'
alias start-htb_pro='sudo openvpn ~/vpn_configs/pro_labs_Abr4Xa5.ovpn'
alias start-htb_sp='sudo openvpn ~/vpn_configs/starting_point_Abr4Xa5.ovpn'
alias start-htb_release='sudo openvpn ~/vpn_configs/release_arena_Abr4Xa5.ovpn'



#Tools

alias hosts='sudo nano /etc/hosts'
alias grep_ip='grep -E -o "([0-9]{1,3}[.]){3}[0-9]{1,3}"'
alias gototools='cd ~/Tools'
alias Tools='gototools'
alias fd='fdfind'

## Nmap
function nmap_common_cmd()
{
    sudo nmap "$1" -Pn -sV -sC -v -T4 -oA "$1"
}
alias nmapbasic='nmap_common_cmd'
alias nse-find="cat /usr/share/nmap/scripts/script.db | grep "

alias pc='pwncat-cs'

## gobuster
function gobuster_directory_bruteforcing
{
    gobuster dir -u http://"$1" -w /usr/share/wordlists/dirb/common.txt -e -s "200,301,302,401" -x "php,html,txt" -t 100 -o gobuster-"$1"
}
alias godirbust='gobuster_directory_bruteforcing'

function gobuster_vhosts_cmd()
{
    gobuster vhost -u http://"$1" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -o subdomain-gobuster-"$1"
}
alias gosubdomain='gobuster_vhosts_cmd'


## FFUF

## ffuf directory bruteforcing
function ffuf_directory_bruteforcing()
{
    ffuf -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://"${1}"/FUZZ -o ffuf_"${1}".md -of md -t 100 -r "${@:2}"
}
alias ffufdirbust='ffuf_directory_bruteforcing'

## ffuf directory bruteforcing recursive
function ffuf_directory_bruteforcing_recursion()
{
    ffuf -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://"${1}"/FUZZ -o ffuf_"${1}".md -of md -t 100 -recursion "${@:2}"
}
alias ffufrecursive='ffuf_directory_bruteforcing'

## ffuf subdomain enumeration
function ffuf_subdomain_enum()
{
    ffuf -c -u http://"$1" -H "Host: FUZZ.${1}" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -o ffuf-subdomain_enum-"${1}".md -of md -v "${@:2}"
    #ffuf -u http://FUZZ."$1" -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -v -o ffuf-subdomain_enum-"$1"
}
alias fuffsubdomain='ffuf_subdomain_enum'

function ffuf_onelistforall()
{
    ffuf -c -w /usr/share/wordlists/OneListForAll/onelistforallmicro.txt -u http://"${1}"/FUZZ -t 100 -r -of md -o onelistforallFUZZ.md "${@:2}"
}


## WFUZZ

## wfuxzz directory bruteforcing
function wfuzz_directory_bruteforcing()
{
    #wfuzz -u http://"$1"/FUZZ -w /usr/share/wordlists/wfuzz/general/big.txt -c -f wfuzz_"$1" --sc 200,301
    wfuzz -c -w /usr/share/seclists/Discovery/Web-Content/common.txt --sc 200,202,204,301,302,307,403  -f wfuzz_"$1".md -u http://"$1"/FUZZ "${@:2}"
}
alias wfuzzdir='wfuzz_directory_bruteforcing'

function wfuzz_subdomain_enum()
{
    #wfuzz -u http://"$1"/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt --hc 301 -v -c 'Host:FUZZ."$1"'
    sudo wfuzz -c -Z -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H "Host: FUZZ.${1}" -f subdomain_wfuzz_"$1".md -u http://"$1" "${@:2}"
}
alias wfuzzsubdomain='wfuzz_subdomain_enum'

function grep_js_files()
{
    cat "$1" | js-beautify | grep "$2"
}
alias grepjs='grep_js_files'

# nikto with output
#alias nicto='nikto -o nikto.txt -ask no -url http://"$1"'
function nicto(){
    nikto -output nikto-"$1".txt -ask no -url http://"$1"
}

function nuclei_basic(){
    nuclei -u "${1}" -as -o nuclei_output.txt "${@:2}"
}


#alias printwfuzz='echo "wfuzz -c -w /usr/share/seclists/Discovery/Web-Content/common.txt --sc 200,202,204,301,302,307,403 -f wfuzz_target -u "http://target/FUZZ"'
#alias printsubdomain='echo "sudo wfuzz -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H 'Host: FUZZ.target' --sc 202,204,301,302,307,403  -f subdomain_wfuzz_target -u "http://target"'

alias bat='batcat'
alias xc='xclip -sel clip'

# cracking zip files with rockyou.txt
alias crackzip='fcrackzip -v -u -D -p /usr/share/wordlists/rockyou.txt'

john_rock() {
    if [ $# -eq 0 ]
    then
        echo "[+] Usage: rock_john wordlist (options)"
    else
        john "${@}" --wordlist=/usr/share/wordlists/rockyou.txt
    fi
}

# gospider to spider the website and proxy through burp
alias spider='gospider -t 50 --sitemap --robots --proxy http://127.0.0.1:8080 -o gospider_output -s '
alias spider_noburp='gospider -t 50 --sitemap --robots -s '

# optimized rustscan with nmap script and version scanning
function r_scriptScan()
{
    rustscan -a "$1" --ulimit 5000 -n -- -sCV -v "$@:2"
}
alias rscan='r_scriptScan'
alias anboxlaunch='anbox launch --package=org.anbox.appmgr --component=org.anbox.appmgr.AppViewActivity'

## SSH aliases

 # check for authentication type
function sshAuthCheck()
{
    ssh user@"${1}" -G | grep -E 'pubkeyauthentication|passwordauthentication'
}

 # login with saving host in KnownHostsFile
 # **Dangerous**
function sshRelay()
{
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${@}"
}


# osint

## ipinfo
ipinfo() {
    curl ipinfo.io/"$1"
}
ipinfo_file()
{
    file="$1"
    for ip in $(cat "${1}"); do echo -n "$ip: "; curl -s ipinfo.io/$ip | jq .org; done
}

## shodan
## pipx install shodan
## shodan init <KEY>  //SolomonG
shodanip() {
    shodan host "$1"
}


## greynoise
## https://github.com/GreyNoise-Intelligence/GNQL
## pipx install greynoise
## kali@kali ~ greynoise setup -k NqoHBwFLXNgfpA5FzhZc4Swymv4JCTETnuf5tdgJ8Rot2LGcvFJeKmcT2xGgYRnl
## Configuration saved to '/home/kali/.config/greynoise/config' //a.random.test.mail@gmail.com@gmail.com
greynoiseip() {
    greynoise ip "$1"
}


##emailrep.io
email_info() {
    curl emailrep.io/"${1}"
}

# Fixing shells

py3_tty_upgrade () {
    echo "python3 -c 'import pty;pty.spawn(\"/bin/bash\")'"| xclip -sel clip
}
alias script_tty_upgrade="echo '/usr/bin/script -qc /bin/bash /dev/null'| xclip -sel clip"
alias tty_fix="stty raw -echo; fg; reset"
alias tty_conf="stty -a | sed 's/;//g' | head -n 1 | sed 's/.*baud /stty /g;s/line.*//g' | xclip -sel clip"


# docker

alias dockershell="docker run --rm -i -t --entrypoint=/bin/bash"
alias dockershellsh="docker run --rm -i -t --entrypoint=/bin/sh"

dockershellhere() {
    dirname=${PWD##*/}
    docker run --rm -it --entrypoint=/bin/bash -v "$(pwd)":/"${dirname}" -w /"${dirname}" "$@"
}
dockershellshhere() {
    dirname=${PWD##*/}
    docker run --rm -it --entrypoint=/bin/sh -v "$(pwd)":/"${dirname}" -w /"${dirname}" "$@"
}
alias impacket_docker="docker run --rm -it rflathers/impacket"

smbservehere() {
    local sharename
    [[ -z $1 ]] && sharename="SHARE" || sharename=$1
    docker run --rm -it -p 445:445 -v "${PWD}:/tmp/serve" rflathers/impacket smbserver.py -smb2support "$sharename" /tmp/serve
}

alias nginxhere='docker run --rm -it -p 80:80 -p 443:443 -v "${PWD}:/srv/data" rflathers/nginxserve'
alias servepython='docker run --name python_simplehttpserver -d -v "${PWD}":/var/www:ro -p 80:8080 trinitronx/python-simplehttpserver'
alias pythonhttp='servepython'
alias webdavhere='docker run --rm -it -p 80:80 -v "${PWD}:/srv/data/share" rflathers/webdav'

## docker msf
alias metasploitpf='docker run --rm -it -v "${HOME}/.msf4:/home/msf/.msf4" -p 8443-9005:8443-9005 metasploitframework/metasploit-framework ./msfconsole'
alias msfvenomhere='docker run --rm -it -v "${HOME}/.msf4:/home/msf/.msf4" -v "${PWD}:/data" metasploitframework/metasploit-framework ./msfvenom'

## docker hetty
## review, doexn't work anymore
alias runhetty='docker run -v $HOME/.hetty:/root/.hetty -p 8080:8080 ghcr.io/dstotijn/hetty:latest'

# print all docker aliases
docker_alias() {
    echo "dockershell <containerimage> - Start /bin/bash"
    echo "dockershellhere <containerimage> - Start /bin/bash and map current directory"
    echo "smbservehere - Start Smb server on port 445 and host current directory"
    echo "nginxhere - Host current directory over port 445 and 80"
    echo "pythonhttp - docker instance of python http server"
    echo "webdavhere - Host over webdav"
    echo "metasploitpf - Start metasploit and port forward 8443-9005"
    echo "msfvenomhere - Map current directory to msfvenom"
}


## Helper functions

# delete empty newlines
alias delEmptynewline="sed '/^[[:space:]]*$/d'"

#urlEncoding and decoding
alias urlencode='python3 -c "import sys, urllib.parse as ul;print(ul.quote(sys.argv[1]))"'
alias urlencode+='python3 -c "import sys, urllib.parse as ul;print(ul.quote_plus(sys.argv[1]))"'

alias urldecode='python3 -c "import sys, urllib.parse as ul;print(ul.unquote(sys.argv[1]))"'

# chisel
function chisel_server_start(){
    
    echo 'Usage'
    echo './chisel server --reverse -p LISTEN_PORT'
    echo './chisel client ATTACKING_IP:LISTEN_PORT R:LOCAL_PORT:TARGET_IP:TARGET_PORT'
    echo ''
    echo 'This will create a tunnel to `TARGET_IP:TARGET_PORT` accessible through `127.0.0.1:LOCAL_PORT`'
    echo ''
    /home/kali/Tools/chisel/chisel_1.7.6_linux_amd64 server --reverse --port "${1}"
}


# pipenv aliases

function xnLinkFinder(){
    cd /home/kali/Tools/xnLinkFinder
    pipenv run python xnLinkFinder.py "${@}"
    cd -
    mv "$OLDPWD/output.txt" ./xnLinkFinder_output.txt
    mv "$OLDPWD/parameters.txt" ./xnLinkFinder_parameters.txt
}

alias dotfiles='/usr/bin/git --git-dir=$HOME/.wslDotfiles.git/ --work-tree=$HOME'


